// ==========================================================================
// Mixins
// ==========================================================================

// BEM selectors

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Media queries

@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint--sm) and (max-width: $brkpoint--md) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint--md + 1) {
      @content;
    }
  }
  @else if $break == "large" {
    @media (min-width: $brkpoint--lg) {
      @content;
    }
  }
  @else {
    @error "No value could be retrieved for `#{$break}`. "
  }
}

// Generate modifier color classes

@mixin ui-colors($map, $p-el:null) {
  @each $theme, $color in $map {
    @include m($theme) {
      background-color: $color-primary;

      // If an $p-el value is passed, generate pseudo-element bg colors. Used on progbars.
      @if $p-el {
        &:after {
          background-color: lighten($color, 8%);
        } 
      }
    }
  }
}

// Generating :before or :after pseudo-element shapes

@mixin p-el(
  $el,
  $el-w: null,
  $el-h: null) {
    @if $el == "before" or $el == "after" {
      &:#{$el} {
       @extend %pseudos;
       width: $el-w;
       height: $el-h;
       @content;
     }
   } 
   @else {
     @error "`#{$el}` is not a valid pseudo-element.";
   }
}

// Image replacement

@mixin img-replace($img, $w, $h, $disp: block) {
	background-image: url('#{$path--rel}/#{$img}');
	background-repeat: no-repeat;
	width: $w;
	height: $h;
	display: $disp;
}

// Adjacent sibling margins

@mixin doubly($margin: 1em) {
  & + & {
   margin-left: $margin;
   @content;
  }
}

// Grid columns

@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate and output the column modifier classes 
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}

// Web fonts

@mixin font-face($family, $file) {
  @font-face {
    font-family: 'FaktSoftPro-Blond';
      src: url('FaktSoftPro-Blond.eot');
      src: local('../fonts'),
      url(#{$path-font}/#{$file}.eot?#iefix) format('embedded-opentype'),
      url(#{$path-font}/#{$file}.woff) format('woff'), 
      url(#{$path-font}/#{$file}.svg) format('svg'),
      url(#{$path-font}/#{$file}.ttf) format('truetype');
      font-weight: 100;
      font-style: normal;
  }
}

@mixin font-face($family, $file) {
  @font-face {
    font-family: 'FaktSoftPro-Semibold';
      src: url('FaktSoftPro-Semibold.eot');
      src: local('../fonts'),
      url(#{$path-font}/#{$file}.eot?#iefix) format('embedded-opentype'),
      url(#{$path-font}/#{$file}.woff) format('woff'), 
      url(#{$path-font}/#{$file}.svg) format('svg'),
      url(#{$path-font}/#{$file}.ttf) format('truetype');
      font-weight: 400;
      font-style: normal;
  }
}

// Text
@mixin text($size, $style: null, $weight: null, $color: null) {
  font-size: $size;
  font-style: $style;
  font-weight: $weight;
  color: $color;
}

// SVG Images

@mixin background-image($img) {
  background-image: url('#{$path--rel}/#{$img}');
  background-repeat: no-repeat;
}

@mixin background-svg-support($png, $svg) {
  background: transparent url('#{$path--rel}/#{$img}') center center no-repeat;
  background-image: -webkit-linear-gradient(transparent, transparent), url('#{$path--rel}/#{$img}');
  background-image: linear-gradient(transparent, transparent), url('#{$path--rel}/#{$img}');
}


